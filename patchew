#!/usr/bin/env python2
#
# The MIT License (MIT)
#
# Copyright (c) 2014 Fam Zheng <fam@euphon.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import sys
import os
import argparse
import email
import mailbox
import json
import shutil
import hmac
import urllib
import tempfile
import time
import subprocess
import libpatchew
from libpatchew import *

def dump_headers(m):
    print "  From:", m.get_from(True)
    print "  To:", m.get_to(True)
    print "  Cc:", m.get_cc(True)

def dump_status(db, msg_id):
    def prettify(k, v):
        if k in ["reviewers", "repliers"]:
            return ", ".join("%s <%s>" % (n, a) for n, a in v)
        return v

    s = db.get_statuses(msg_id)
    for k, v in s.iteritems():
        print "  %-20s = %s" % (k, prettify(k, v))

def import_message(db, m, verbose):
    msg = Message(m.as_string())
    r = None
    try:
        r = db.add_message(msg)
        if verbose:
            print "Message:", msg.get_subject()
    except MessageDuplicated:
        print "Message duplicated:", msg.get_message_id(), msg.get_subject()
    except Exception, e:
        print "Error while saving message:"
        print m.as_string()
        raise
    return r

def import_mbox(db, f, verbose):
    r = []
    mbox = mailbox.mbox(f)
    for m in mbox:
        i = import_message(db, m, verbose)
        if i:
            r.append(i)
    return r

def import_mail(db, f, verbose):
    m = email.message_from_file(open(f, 'r'))
    if m:
        return import_message(db, m, verbose)

def import_args(parser):
    parser.add_argument("file", nargs="+", help="The file(s) to import")
    parser.add_argument("-v", "--verbose", action="store_true",
                        help="Show more information")
    parser.add_argument("-r", "--reset", action="store_true",
                        help="Reset the DB before import")

def is_mbox_file(f):
    fd = open(f, 'r')
    l = ""
    while not l.strip():
        l = fd.readline()
    return l.startswith("From ")

def import_cmd(db, args):
    if args.reset:
        db.reset()
    a = []

    def import_one(a, f):
        if is_mbox_file(f):
            a += import_mbox(db, f, args.verbose)
        else:
            m = import_mail(db, f, args.verbose)
            if m:
                a.append(m)

    def walk_dir(a, dirname, fnames):
        for i in fnames:
            import_one(a, os.path.join(dirname, i))

    for f in args.file:
        if os.path.isdir(f):
            os.path.walk(f, walk_dir, a)
        else:
            import_one(a, f)
    for i in a:
        db.process_message(i)

def syncdb_args(parser):
    parser.add_argument("-m", "--message-id", type=str, default="",
                        help="Only process the message with given message-id")

def syncdb_cmd(db, args):
    if not args.message_id:
        for s in db.find_messages():
            db.process_message(s.get_message_id())
    else:
        db.process_message(args.message_id)
    return True

def add_query_args(parser):
    parser.add_argument("query", type=str, default="", nargs="*",
                        help="Query string")

def query_args(parser):
    parser.add_argument("-r", "--reverse", action="store_true",
                        help="Sort reversely")
    parser.add_argument("-p", "--patches", action="store_true",
                        help="Show patches in the series")
    parser.add_argument("-v", "--verbose", action="store_true",
                        help="Show more information about series")
    add_query_args(parser)

def query_cmd(db, args):
    for s in db.find_series(" ".join(args.query), args.reverse):
        print s.get_date(), "", s
        if args.verbose:
            dump_headers(s)
            dump_status(db, s.get_message_id())
            print

        if args.patches:
            for p in db.get_patches(s):
                if p.get_message_id() != s.get_message_id():
                    print "                    ", p
            print
    return 0

def untest_args(parser):
    add_query_args(parser)

def untest_cmd(db, args):
    for s in db.find_series(" ".join(args.query)):
        st = db.get_status(s.get_message_id(), "testing")
        if st:
            print "untest:", s.get_subject()
            db.set_status(s.get_message_id(), "testing", None)

def delete_args(parser):
    add_query_args(parser)

def delete_cmd(db, args):
    for s in db.find_series(" ".join(args.query)):
        print "Delete:", s.get_subject()
        db.delete_series(s)

def server_args(parser):
    parser.add_argument("-c", "--config", help="Config file")
    parser.add_argument("-p", "--port", type=int, help="Override port number")
    parser.add_argument("-d", "--debug", action="store_true", help="Override debug flag")

def server_cmd(db, args):
    if not libpatchew.config.load_config(args.config,
                              "server.conf",
                              "/etc/patchew/server.conf"):
        print "Cannot find config file"
    host = libpatchew.config.get("server", "host", "0.0.0.0")
    port = libpatchew.config.get("server", "port", 80)
    debug = libpatchew.config.get("server", "debug", False)
    if args.port:
        port = int(args.port)
    start_server(db, host=host, port=port, debug=debug)
    return 0

def tester_args(parser):
    parser.add_argument("-s", "--server", required=True,
                        help="Pathew server's base URL")
    parser.add_argument("-i", "--identity", required=True,
                        help="Verification identity to use")
    parser.add_argument("-p", "--signature-key", required=True,
                        help="Verification key to use")
    parser.add_argument("-t", "--test-script",
                        help="Test script to run inside the container")
    parser.add_argument("-d", "--docker-image",
                        help="Docker image to use.")
    parser.add_argument("-L", "--loop", action="store_true",
                        help="Loop and repeat.")
    parser.add_argument("-C", "--quick-repo", default=None,
                        help="""Clone from a (faster) git repo before pulling
                        from the server returned codebase, in order to speed up
                        the test.""")
    parser.add_argument("-k", "--keep-temp", default=False, action="store_true",
                        help="Don't remove temporary directory before exit")

def check_docker(args):
    if args.test_script or args.docker_image:
        if not args.test_script:
            print "You need to specify --test-script to run docker test"
            return False
        if not args.docker_image:
            print "You need to specify --docker-image to run docker test"
            return False
        try:
            subprocess.check_output(["docker", "version"])
        except Exception, e:
            print "Failed to run docker version:", e
            return False
    return True

def dump_test_spec(logger, spec):
    for k_, v in spec.iteritems():
        k = "%-30s :" % k_
        if isinstance(v, list):
            logger(k, "[...]\n")
        elif "\n" in str(v):
            logger(k)
            logger(v, "\n")
        else:
            logger(k, v, "\n")

def tester_cmd(args):
    if not check_docker(args):
        return False
    base_url = args.server
    if not base_url.endswith("/"):
        base_url += "/"
    next_url = base_url + "testing/next"
    report_url = base_url + "testing/report"
    tmpdir = "/var/tmp/patchew-tester"
    shutil.rmtree(tmpdir, True)
    os.mkdir(tmpdir)
    while True:
        try:
            testdir = tempfile.mkdtemp(dir=tmpdir)
            logfile = os.path.join(testdir, "log")
            logger = TestLogger(logfile, "w+")
            logger("Server: %s\n" % base_url)
            logger("Fetching new test...")
            r = urllib.urlopen(next_url)
            resp = r.read()
            r.close()
            try:
                spec = json.loads(resp)
            except Exception, e:
                logger("\nInvalid response from server:\n", resp)
                raise e
            if spec['version'] != Tester.VERSION:
                logger("\nUnknown server version: ", spec['version'], "\n")
                return False

            logger("OK\n")
            if spec['has-data']:
                dump_test_spec(logger, spec)
                tester = Tester(logger, testdir, spec, args.test_script, args.docker_image, args.quick_repo)
                result, reason = tester.do_test()
                logger.seek(0)
                data = json.dumps({
                    'message-id': spec['message-id'],
                    'passed': result,
                    'failure-step': reason,
                    'merged': result and reason == "merged",
                    'log': logger.read(),
                    })
                hasher = hmac.new(args.signature_key, data)
                signature = hasher.hexdigest()
                postdata = urllib.urlencode({
                    'version': tester.VERSION,
                    'data': data,
                    'signature': signature,
                    'identity': args.identity,
                    })
                try:
                    print "Submitting result to server..."
                    r = urllib.urlopen(report_url, postdata)
                    resp = r.read()
                    r.close()
                    resp = json.loads(resp)
                    if not resp['ok']:
                        print "Could not submit test result:", resp.get('error')
                        print resp
                    else:
                        print "OK"
                except Exception, e:
                    print "Error while parsing server response", e
                    print resp
                if not args.keep_temp:
                    shutil.rmtree(testdir, True)
            else:
                print "Nothing to test, let's have a rest..."
                time.sleep(60)
        except Exception, e:
            raise
        if not args.loop:
            break

def newid_args(parser):
    parser.add_argument("identity")

def newid_cmd(db, args):
    hasher = hmac.new(str(time.time()), args.identity)
    key = hasher.hexdigest()
    db.save_identity_pair(args.identity, key)
    print key

commands = {
    'import':  {
        'args': import_args,
        'cmd': import_cmd,
    },
    'syncdb':  {
        'args': syncdb_args,
        'cmd': syncdb_cmd,
        'help': 'rescan all the messages and update metadata',
    },
    'query':  {
        'args': query_args,
        'cmd': query_cmd,
    },
    'untest':  {
        'args': untest_args,
        'cmd': untest_cmd,
        'help': 'reset testing date for series',
    },
    'delete':  {
        'args': delete_args,
        'cmd': delete_cmd,
        'help': 'delete series by query',
    },
    'server':  {
        'cmd': server_cmd,
        'args': server_args,
    },
    'newid': {
        'cmd': newid_cmd,
        'args': newid_args,
    },
    'tester': {
        'cmd': tester_cmd,
        'require-db': False,
        'args': tester_args
    },
}

def create_db(url):
    dbt, rest = url.split("://", 2)
    if dbt != "mongo":
        raise Exception("Unknown database type: " + dbt)
    if "/" not in rest:
        raise Exception("Missing database name")
    server, dbname = rest.split("/")
    if ":" in server:
        server, port = server_port.split(":", 2)
        try:
            port = int(port)
        except Exception, e:
            raise Exception("Invalid port: " + port)
    else:
        port = None
    return DB(server, port, dbname)

def no_db_wrap(fn):
    def wrap(db, args):
        return fn(args)
    return wrap

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-d", "--db", type=str, default="mongo://localhost/patchew",
                        help="database url: <type>://<server>[:<port>]/<dbname>\nCurrently only mongo:// is supported")
    subparsers = parser.add_subparsers(title="subcommands")
    for c, v in commands.iteritems():
        p = subparsers.add_parser(c, help=v.get("help"))
        if 'args' in v:
            v['args'](p)
        if v.get('require-db', True):
            p.set_defaults(func=v['cmd'])
            p.set_defaults(require_db=True)
        else:
            p.set_defaults(func=no_db_wrap(v['cmd']))
            p.set_defaults(require_db=False)
    args = parser.parse_args()

    db = None
    if args.require_db:
        try:
            db = create_db(args.db)
        except Exception, e:
            print "Error in initializing database:", e
            return -1
    return args.func(db, args)

if __name__ == '__main__':
    sys.exit(main())

